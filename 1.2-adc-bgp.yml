
- hosts: adc

  gather_facts: no
  vars:
    bgp_inconsistency: []
    route_n: []
  tasks:

  - name: Get HA status
    delegate_to: localhost
    fortiadcmonitor:
     action: "system ha status"
     host:  "{{ host }}"
     username: "{{ username }}"
     password: "{{ password }}"
    register: system_ha_info

  # - debug:
  #     msg: "{{ system_ha_info['meta']['output']['payload']['local_state'] }}"

  - name: Get BGP status
    delegate_to: localhost
    fortiadcmonitor:
     host:  "{{ host }}"
     username: "{{ username }}"
     password: "{{ password }}"
     vdom: "data"
     method: "ssh"
     commands: "get router info bgp summary"
    register: result_bgp_info
    when: "system_ha_info['meta']['output']['payload']['local_state'] == 'Primary'"

  - debug:
     msg: "{{ result_bgp_info }}"

  - name: "Run command and parse with ntc_templates"
    ansible.netcommon.cli_parse:
      text: "{{ result_bgp_info.meta.out }}"
      parser:
        name: ansible.netcommon.textfsm
        template_path: "./templates/fortiadc/vdom/bgp_neighbors"
      set_fact: bgp_parsed
    when: "system_ha_info['meta']['output']['payload']['local_state'] == 'Primary'"

  - name: "Check BGP neighbors number"
    set_fact:
      bgp_inconsistency: "{{ bgp_inconsistency + [ inventory_hostname + ': has ' + bgp_parsed | length | string + ' neighbors, but ' + bgp.neighbor | length | string + ' expected'] }}"
    when:
      - 'bgp_parsed | default([]) | length != bgp.neighbor | length'
      - "system_ha_info['meta']['output']['payload']['local_state'] == 'Primary'"

  - name: "Check if BGP neighbors running"
    set_fact:
      bgp_inconsistency: "{{ bgp_inconsistency + [ inventory_hostname + ': bgp neighbor ' + item.BGP_NEIGH + ' is not running']}}"
    when:
      - 'not (item.STATE_PFXRCD | int(-1) >= 0)'
      - "system_ha_info['meta']['output']['payload']['local_state'] == 'Primary'"
    with_items: "{{ bgp_parsed | default([]) }}"

  - name: Analyze and print result
    debug:
       msg: "{{ 'BGP ok' if (bgp_inconsistency | length) == 0 else bgp_inconsistency}}"
    when: "system_ha_info['meta']['output']['payload']['local_state'] == 'Primary'"
